#include <behaviors.dtsi> 
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#include "adv360pro_keypos.h"
#include "zmk_helper.h"

#define ___ &trans



/* Layer references  */
#define QWERTY 0
#define SYM 1
#define NUM 2
#define NAV 3
#define FN 4
#define MOD 5

/* Global settings */
#include "general.h"

/* Home row mods */
#include "homerow_mods.h"

/* Macros and shortcuts */
#include "custom_behaviors.h"

/* combos */

#undef COMBO_HOOK
#define COMBO_HOOK global-quick-tap-ms = <100>;

    
/ { /*start of device tree */

//behaviors {
//    
// hm_ss: homerow_mod_ss {
//            compatible = "zmk,behavior-hold-tap";
//            #binding-cells = <2>;
//            tapping-term-ms = <80>;
//            quick-tap-ms = <80>;
//            flavor = "tap-preferred";
//            bindings = <&kp>, <&ger_eszett>;
//            label = "HOMEROW_MOD_SS";
//    };
//
// };


   macros {






// ä/Ä
german_ae: german_ae {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    wait-ms = <1>;
    tap-ms = <1>;
    bindings = <&macro_tap &kp DQT>, <&macro_tap &kp A>;  // Auto-shifts with Shift!
    label = "GERMAN_AE";
};

// ö/Ö
german_oe: german_oe {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    wait-ms = <1>;
    tap-ms = <1>;
    bindings = <&macro_tap &kp DQT>, <&macro_tap &kp O>;
    label = "GERMAN_OE";
};

// ü/Ü
german_ue: german_ue {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    wait-ms = <1>;
    tap-ms = <1>;
    bindings = <&macro_tap &kp DQT>, <&macro_tap &kp U>;
    label = "GERMAN_UE";
};

//ger_eszett: german_eszett {
//        compatible = "zmk,behavior-macro";
//        #binding-cells = <0>;
//        wait-ms = <1>; // Added wait time
//        tap-ms = <1>;  // Added tap time
//        bindings = <&macro_press &kp LALT>, <&macro_tap &kp S>, <&macro_release &kp LALT>;
//        label = "GERMAN_ESZETT";
//    };

}; 

   combos {
        compatible = "zmk,combos";
        
        combo_esc {
            timeout-ms = <20>;
            key-positions = <LT3 LT2>;
            bindings = <&kp ESC>;
            layers = <0 1 2>;
        };
        combo_space {
            timeout-ms = <20>;
            key-positions = <RM1 RM2>;
            bindings = <&kp SPACE>;
            layers = <0 1 2>;
        };
        combo_ret {
            timeout-ms = <20>;
            key-positions = <RM0 RM1>;
            bindings = <&kp RETURN>;
            layers = <0 1 2>;
        };
         combo_tab {
            timeout-ms = <20>;
            key-positions = <RT2 RT3>;
            bindings = <&kp TAB>;
            layers = <0 1 2>;
        };
        combo_shift_tab {
            timeout-ms = <50>;
            key-positions = <RT1 RT2>; 
            bindings = <&kp LS(TAB)>;
            layers = <0 1 2>;
        };
        
        combo_bspc {
            timeout-ms = <20>;
            key-positions = <LM1 LM0>;
            bindings = <&kp BSPC>;
            layers = <0 1 2>;
        };
        
        combo_doubleq {
            timeout-ms = <50>;
            key-positions = <RT1 RT2 RT3>; 
            bindings = <&mdqt>;
            layers = <0 1 2>;
        };
        
        combo_singleq {
            timeout-ms = <20>;
            key-positions = <LT3 LT2 LT1>;
            bindings = <&msqt>;
            layers = <0 1 2>;
        };


        combo_cut {
            timeout-ms = <20>;
            key-positions = <LB4 LB3>;
            bindings = <&kp LG(X)>;
            layers = <0 1 2>;
        };
        combo_copy {
            timeout-ms = <20>;
            key-positions = <LB3 LB2>;
            bindings = <&kp LG(C)>;
            layers = <0 1 2>;
        };
        combo_paste {
            timeout-ms = <20>;
            key-positions = <LB2 LB1>;
            bindings = <&kp LG(V)>;
            layers = <0 1 2>;
        };
       combo_undo {
            timeout-ms = <20>;
            key-positions = <LB4 LB1>;
            bindings = <&kp LG(Z)>;
            layers = <0 1 2>;
        };



        combo_qmark {
            timeout-ms = <20>;
            key-positions = <RB2 RB3>;
            bindings = <&kp QMARK>;
            layers = <0 1 2>;
        };
        combo_excl {
            timeout-ms = <20>;
            key-positions = <RB1 RB4>;
            bindings = <&kp EXCL>;
            layers = <0 1 2>;
        };
        combo_dot {
            timeout-ms = <20>;
            key-positions = <RB1 RB2>;
            bindings = <&kp DOT>;
            layers = <0 1 2>;
        };
        combo_colon {
            timeout-ms = <20>;
            key-positions = <RB1 RB3>;
            bindings = <&kp COLON>;
            layers = <0 1 2>;
        };
        combo_comma {
            timeout-ms = <20>;
            key-positions = <RB3 RB4>;
            bindings = <&kp COMMA>;
            layers = <0 1 2>;
        };
        combo_semi {
            timeout-ms = <20>;
            key-positions = <RB2 RB4>;
            bindings = <&kp SEMI>;
            layers = <0 1 2>;
        };
};


    chosen {
        zmk,matrix_transform = &urobs_transform;
           }; /* remove unused keys from layout and move thumb cluster to bottom */

    keymap {
        compatible = "zmk,keymap";
 
    qwerty_layer {
            bindings = <
     ___            ___           ___           ___           ___           ___            ___              ___            ___           ___           ___           ___             ___                   &mo MOD
     ___            &kp Q         &kp W         &kp E         &kp R         &kp T          ___              ___            &kp Y         &kp U         &kp I         &kp O          &kp P                  ___
     ___            &hml LGUI A  &hml LALT S   &hml LCTRL D   &hml LSHFT F  &kp G          ___              ___            &kp H         &hmr RSHFT J  &hmr RCTRL K  &hmr RALT L    &hmr RGUI AMPS         ___ 
     ___            &kp Z         &kp X         &kp C         &kp V         &kp B                                          &kp N         &kp M         &german_ae    &german_ue     &german_oe             ___
     ___            ___           ___           ___           ___                                                                        ___           ___           ___             ___                   ___
                                                                             ___           ___              ___            ___    
                                                              &lt NUM BSPC  &lt FN ESC     ___              ___            &lt NAV RET  &lt SYM SPC 
                                                                                           ___              ___            
                    >;
                    };


        sym_layer { 
          bindings = <
     ___            ___           ___           ___           ___           ___            ___              ___            ___           ___            ___          ___           ___           ___
     ___            &kp DQT       &kp DQT       &kp LPAR      &kp RPAR      ___            ___              ___            ___           &kp UNDER     SYM_LBKT      SYM_RBKT      &kp SQT       ___
     &kp DOLLAR     SYM_CARET     SYM_TILDE     SYM_PLUS      SYM_MINUS     &kp HASH       ___              ___            &kp PRCNT     &kp EQUAL     &kp LBRC      &kp RBRC      &kp GRAVE     &kp AT
     ___            ___           &kp STAR      &kp BSLH      &kp FSLH      ___                                            ___           &kp PIPE      &kp LT        &kp GT        ___           ___
     ___            ___           ___           ___           ___                                                                        ___            ___          ___           ___           ___
                                                                             ___           ___              ___           ___ 
                                                               ___           ___           ___              ___           ___            ___
                                                                                           ___              ___
            >;
        };

        num_layer {
            bindings = <
     ___            ___           ___           ___           ___           ___             ___              ___            ___          ___           ___           ___           ___            ___
     ___            &kp DQT       &kp DQT       &kp LPAR      &kp RPAR      ___             ___              ___            &mbrc        &kp N7        &kp N8        &kp N9        ___            ___
     &kp DOLLAR     &kp CARET     &kp TILDE     SYM_PLUS      &kp MINUS     &kp HASH        ___              ___            &mbkt        &kp N4        &kp N5        &kp N6        ___            ___
     ___            ___           &kp STAR      &kp BSLH      &kp FSLH      ___                                             &mpar        &kp N1        &kp N2        &kp N3        ___            ___
     ___            ___           ___           ___           ___                                                                        ___           ___           ___           ___            ___
                                                                             ___           ___              ___           ___
                                                               ___           ___           ___              ___           ___           &kp N0
                                                                                           ___              ___
                    >;
                    };


       


        

        nav_layer {
            bindings = <
     ___            ___           ___           ___           ___           ___            ___              ___            ___           ___           ___           ___           ___            ___
     ___            SPC_UNDO      SPC_LEFT      SPC_UP        SPC_DOWN      SPC_RIGHT      SPC_MVL          ___            ___           ___           ___           ___           ___            ___
     ___            &sk LGUI      &sk LALT      &sk LCTRL     &sk LSHFT     SPC_FULL       SPC_MVR          ___            ___           &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT      ___
     ___            PREV_WINDOW   NEXT_WINDOW   SWAP_PREV     SWAPPER       ___                                            ___           ___           ___           ___           ___            ___
     ___            ___           ___           ___           ___                                                                        ___           ___           ___           ___            ___
                                                                             ___           ___              ___           ___
                                                               ___           ___           ___              ___           ___           ___
                                                                                           ___              ___
            >;
        };

         fn_layer {
            bindings = <
     ___            ___           ___           ___            ___          ___            ___              ___            ___           &kp F10       &kp F11       &kp F12       ___            ___
     ___            ___           ___           ___           ___           ___            ___              ___            ___           &kp F7        &kp F8        &kp F9        ___            ___
     ___            ___           ___           ___           ___           ___            ___              ___            ___           &kp F4        &kp F5        &kp F6        ___            ___
     ___            ___           ___           ___           ___           ___                                            ___           &kp F1        &kp F2        &kp F3        ___            ___
     ___            ___           ___           ___           ___                                                                        ___           ___           ___           ___            ___
                                                                             ___           ___              ___           ___
                                                               &kp C_BRI_DN  &kp C_BRI_UP  ___              ___           ___           ___
                                                                                           LOCK_SCRN        ___
            >;
        };

        mod_layer {
            bindings = <

     ___            BT_0          BT_1          BT_2          BT_3          BT_4           ___              ___            BT_0          BT_1          BT_2          BT_3          BT_4           ___
     ___            ___           &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  ___            ___              ___            ___           ___           ___           ___           ___            ___
     ___            ___           &kp C_PREV    &kp C_PP      &kp C_NEXT    ___            ___              ___            ___           ___           ___           ___           ___            ___
     ___            ___           ___           ___           ___           ___                                            ___           ___           ___           ___           ___            ___
     ___            ___           ___           ___           ___                                                                        &bl BL_DEC    &bl BL_INC    ___           ___            ___
                                                                             &bootloader   ___              ___           &bootloader
                                                               &bl BL_DEC    &bl BL_INC    &bt BT_CLR       &bt BT_CLR    &kp C_PP      &kp C_MUTE
                                                                                           &bl BL_TOG      ___
            >;
        };


    };
};
